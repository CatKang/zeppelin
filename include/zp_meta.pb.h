// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zp_meta.proto

#ifndef PROTOBUF_zp_5fmeta_2eproto__INCLUDED
#define PROTOBUF_zp_5fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ZPMeta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zp_5fmeta_2eproto();
void protobuf_AssignDesc_zp_5fmeta_2eproto();
void protobuf_ShutdownFile_zp_5fmeta_2eproto();

class Node;
class NodeStatus;
class Nodes;
class Replicaset;
class Partitions;
class MetaCmd;
class MetaCmd_Join;
class MetaCmd_Ping;
class MetaCmd_Update;
class MetaCmdResponse;
class MetaCmdResponse_Status;

enum MetaCmd_Type {
  MetaCmd_Type_JOIN = 1,
  MetaCmd_Type_PING = 2,
  MetaCmd_Type_UPDATE = 3
};
bool MetaCmd_Type_IsValid(int value);
const MetaCmd_Type MetaCmd_Type_Type_MIN = MetaCmd_Type_JOIN;
const MetaCmd_Type MetaCmd_Type_Type_MAX = MetaCmd_Type_UPDATE;
const int MetaCmd_Type_Type_ARRAYSIZE = MetaCmd_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetaCmd_Type_descriptor();
inline const ::std::string& MetaCmd_Type_Name(MetaCmd_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetaCmd_Type_descriptor(), value);
}
inline bool MetaCmd_Type_Parse(
    const ::std::string& name, MetaCmd_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetaCmd_Type>(
    MetaCmd_Type_descriptor(), name, value);
}
enum MetaCmdResponse_Type {
  MetaCmdResponse_Type_JOIN = 1,
  MetaCmdResponse_Type_PING = 2,
  MetaCmdResponse_Type_UPDATE = 3
};
bool MetaCmdResponse_Type_IsValid(int value);
const MetaCmdResponse_Type MetaCmdResponse_Type_Type_MIN = MetaCmdResponse_Type_JOIN;
const MetaCmdResponse_Type MetaCmdResponse_Type_Type_MAX = MetaCmdResponse_Type_UPDATE;
const int MetaCmdResponse_Type_Type_ARRAYSIZE = MetaCmdResponse_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetaCmdResponse_Type_descriptor();
inline const ::std::string& MetaCmdResponse_Type_Name(MetaCmdResponse_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetaCmdResponse_Type_descriptor(), value);
}
inline bool MetaCmdResponse_Type_Parse(
    const ::std::string& name, MetaCmdResponse_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetaCmdResponse_Type>(
    MetaCmdResponse_Type_descriptor(), name, value);
}
enum StatusCode {
  kOk = 0,
  kNotFound = 1,
  kError = 2
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kError;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPMeta.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class NodeStatus : public ::google::protobuf::Message {
 public:
  NodeStatus();
  virtual ~NodeStatus();

  NodeStatus(const NodeStatus& from);

  inline NodeStatus& operator=(const NodeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeStatus& default_instance();

  void Swap(NodeStatus* other);

  // implements Message ----------------------------------------------

  NodeStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeStatus& from);
  void MergeFrom(const NodeStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::ZPMeta::Node& node() const;
  inline ::ZPMeta::Node* mutable_node();
  inline ::ZPMeta::Node* release_node();
  inline void set_allocated_node(::ZPMeta::Node* node);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPMeta.NodeStatus)
 private:
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::Node* node_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static NodeStatus* default_instance_;
};
// -------------------------------------------------------------------

class Nodes : public ::google::protobuf::Message {
 public:
  Nodes();
  virtual ~Nodes();

  Nodes(const Nodes& from);

  inline Nodes& operator=(const Nodes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Nodes& default_instance();

  void Swap(Nodes* other);

  // implements Message ----------------------------------------------

  Nodes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Nodes& from);
  void MergeFrom(const Nodes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZPMeta.NodeStatus nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::ZPMeta::NodeStatus& nodes(int index) const;
  inline ::ZPMeta::NodeStatus* mutable_nodes(int index);
  inline ::ZPMeta::NodeStatus* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:ZPMeta.Nodes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus > nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static Nodes* default_instance_;
};
// -------------------------------------------------------------------

class Replicaset : public ::google::protobuf::Message {
 public:
  Replicaset();
  virtual ~Replicaset();

  Replicaset(const Replicaset& from);

  inline Replicaset& operator=(const Replicaset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Replicaset& default_instance();

  void Swap(Replicaset* other);

  // implements Message ----------------------------------------------

  Replicaset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Replicaset& from);
  void MergeFrom(const Replicaset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .ZPMeta.Node node = 2;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 2;
  inline const ::ZPMeta::Node& node(int index) const;
  inline ::ZPMeta::Node* mutable_node(int index);
  inline ::ZPMeta::Node* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >*
      mutable_node();

  // @@protoc_insertion_point(class_scope:ZPMeta.Replicaset)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node > node_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static Replicaset* default_instance_;
};
// -------------------------------------------------------------------

class Partitions : public ::google::protobuf::Message {
 public:
  Partitions();
  virtual ~Partitions();

  Partitions(const Partitions& from);

  inline Partitions& operator=(const Partitions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Partitions& default_instance();

  void Swap(Partitions* other);

  // implements Message ----------------------------------------------

  Partitions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Partitions& from);
  void MergeFrom(const Partitions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .ZPMeta.Node master = 2;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 2;
  inline const ::ZPMeta::Node& master() const;
  inline ::ZPMeta::Node* mutable_master();
  inline ::ZPMeta::Node* release_master();
  inline void set_allocated_master(::ZPMeta::Node* master);

  // repeated .ZPMeta.Node slaves = 3;
  inline int slaves_size() const;
  inline void clear_slaves();
  static const int kSlavesFieldNumber = 3;
  inline const ::ZPMeta::Node& slaves(int index) const;
  inline ::ZPMeta::Node* mutable_slaves(int index);
  inline ::ZPMeta::Node* add_slaves();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >&
      slaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >*
      mutable_slaves();

  // @@protoc_insertion_point(class_scope:ZPMeta.Partitions)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::Node* master_;
  ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node > slaves_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static Partitions* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_Join : public ::google::protobuf::Message {
 public:
  MetaCmd_Join();
  virtual ~MetaCmd_Join();

  MetaCmd_Join(const MetaCmd_Join& from);

  inline MetaCmd_Join& operator=(const MetaCmd_Join& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_Join& default_instance();

  void Swap(MetaCmd_Join* other);

  // implements Message ----------------------------------------------

  MetaCmd_Join* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_Join& from);
  void MergeFrom(const MetaCmd_Join& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::ZPMeta::Node& node() const;
  inline ::ZPMeta::Node* mutable_node();
  inline ::ZPMeta::Node* release_node();
  inline void set_allocated_node(::ZPMeta::Node* node);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.Join)
 private:
  inline void set_has_node();
  inline void clear_has_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::Node* node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_Join* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_Ping : public ::google::protobuf::Message {
 public:
  MetaCmd_Ping();
  virtual ~MetaCmd_Ping();

  MetaCmd_Ping(const MetaCmd_Ping& from);

  inline MetaCmd_Ping& operator=(const MetaCmd_Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_Ping& default_instance();

  void Swap(MetaCmd_Ping* other);

  // implements Message ----------------------------------------------

  MetaCmd_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_Ping& from);
  void MergeFrom(const MetaCmd_Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::ZPMeta::Node& node() const;
  inline ::ZPMeta::Node* mutable_node();
  inline ::ZPMeta::Node* release_node();
  inline void set_allocated_node(::ZPMeta::Node* node);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.Ping)
 private:
  inline void set_has_node();
  inline void clear_has_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::Node* node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_Ping* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_Update : public ::google::protobuf::Message {
 public:
  MetaCmd_Update();
  virtual ~MetaCmd_Update();

  MetaCmd_Update(const MetaCmd_Update& from);

  inline MetaCmd_Update& operator=(const MetaCmd_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_Update& default_instance();

  void Swap(MetaCmd_Update* other);

  // implements Message ----------------------------------------------

  MetaCmd_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_Update& from);
  void MergeFrom(const MetaCmd_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZPMeta.Partitions info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ZPMeta::Partitions& info(int index) const;
  inline ::ZPMeta::Partitions* mutable_info(int index);
  inline ::ZPMeta::Partitions* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.Update)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_Update* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd : public ::google::protobuf::Message {
 public:
  MetaCmd();
  virtual ~MetaCmd();

  MetaCmd(const MetaCmd& from);

  inline MetaCmd& operator=(const MetaCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd& default_instance();

  void Swap(MetaCmd* other);

  // implements Message ----------------------------------------------

  MetaCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd& from);
  void MergeFrom(const MetaCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MetaCmd_Join Join;
  typedef MetaCmd_Ping Ping;
  typedef MetaCmd_Update Update;

  typedef MetaCmd_Type Type;
  static const Type JOIN = MetaCmd_Type_JOIN;
  static const Type PING = MetaCmd_Type_PING;
  static const Type UPDATE = MetaCmd_Type_UPDATE;
  static inline bool Type_IsValid(int value) {
    return MetaCmd_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MetaCmd_Type_Type_MIN;
  static const Type Type_MAX =
    MetaCmd_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MetaCmd_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MetaCmd_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MetaCmd_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MetaCmd_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ZPMeta.MetaCmd.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ZPMeta::MetaCmd_Type type() const;
  inline void set_type(::ZPMeta::MetaCmd_Type value);

  // optional .ZPMeta.MetaCmd.Join join = 2;
  inline bool has_join() const;
  inline void clear_join();
  static const int kJoinFieldNumber = 2;
  inline const ::ZPMeta::MetaCmd_Join& join() const;
  inline ::ZPMeta::MetaCmd_Join* mutable_join();
  inline ::ZPMeta::MetaCmd_Join* release_join();
  inline void set_allocated_join(::ZPMeta::MetaCmd_Join* join);

  // optional .ZPMeta.MetaCmd.Ping ping = 3;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 3;
  inline const ::ZPMeta::MetaCmd_Ping& ping() const;
  inline ::ZPMeta::MetaCmd_Ping* mutable_ping();
  inline ::ZPMeta::MetaCmd_Ping* release_ping();
  inline void set_allocated_ping(::ZPMeta::MetaCmd_Ping* ping);

  // optional .ZPMeta.MetaCmd.Update update = 4;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 4;
  inline const ::ZPMeta::MetaCmd_Update& update() const;
  inline ::ZPMeta::MetaCmd_Update* mutable_update();
  inline ::ZPMeta::MetaCmd_Update* release_update();
  inline void set_allocated_update(::ZPMeta::MetaCmd_Update* update);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_join();
  inline void clear_has_join();
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_update();
  inline void clear_has_update();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::MetaCmd_Join* join_;
  ::ZPMeta::MetaCmd_Ping* ping_;
  ::ZPMeta::MetaCmd_Update* update_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmdResponse_Status : public ::google::protobuf::Message {
 public:
  MetaCmdResponse_Status();
  virtual ~MetaCmdResponse_Status();

  MetaCmdResponse_Status(const MetaCmdResponse_Status& from);

  inline MetaCmdResponse_Status& operator=(const MetaCmdResponse_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmdResponse_Status& default_instance();

  void Swap(MetaCmdResponse_Status* other);

  // implements Message ----------------------------------------------

  MetaCmdResponse_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmdResponse_Status& from);
  void MergeFrom(const MetaCmdResponse_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.StatusCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::ZPMeta::StatusCode code() const;
  inline void set_code(::ZPMeta::StatusCode value);

  // optional bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmdResponse.Status)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  int code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmdResponse_Status* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmdResponse : public ::google::protobuf::Message {
 public:
  MetaCmdResponse();
  virtual ~MetaCmdResponse();

  MetaCmdResponse(const MetaCmdResponse& from);

  inline MetaCmdResponse& operator=(const MetaCmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmdResponse& default_instance();

  void Swap(MetaCmdResponse* other);

  // implements Message ----------------------------------------------

  MetaCmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmdResponse& from);
  void MergeFrom(const MetaCmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MetaCmdResponse_Status Status;

  typedef MetaCmdResponse_Type Type;
  static const Type JOIN = MetaCmdResponse_Type_JOIN;
  static const Type PING = MetaCmdResponse_Type_PING;
  static const Type UPDATE = MetaCmdResponse_Type_UPDATE;
  static inline bool Type_IsValid(int value) {
    return MetaCmdResponse_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MetaCmdResponse_Type_Type_MIN;
  static const Type Type_MAX =
    MetaCmdResponse_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MetaCmdResponse_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MetaCmdResponse_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MetaCmdResponse_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MetaCmdResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ZPMeta.MetaCmdResponse.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ZPMeta::MetaCmdResponse_Type type() const;
  inline void set_type(::ZPMeta::MetaCmdResponse_Type value);

  // required .ZPMeta.MetaCmdResponse.Status status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::ZPMeta::MetaCmdResponse_Status& status() const;
  inline ::ZPMeta::MetaCmdResponse_Status* mutable_status();
  inline ::ZPMeta::MetaCmdResponse_Status* release_status();
  inline void set_allocated_status(::ZPMeta::MetaCmdResponse_Status* status);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmdResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::MetaCmdResponse_Status* status_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required bytes ip = 1;
inline bool Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Node::ip() const {
  return *ip_;
}
inline void Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// NodeStatus

// required .ZPMeta.Node node = 1;
inline bool NodeStatus::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeStatus::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeStatus::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeStatus::clear_node() {
  if (node_ != NULL) node_->::ZPMeta::Node::Clear();
  clear_has_node();
}
inline const ::ZPMeta::Node& NodeStatus::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ZPMeta::Node* NodeStatus::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ZPMeta::Node;
  return node_;
}
inline ::ZPMeta::Node* NodeStatus::release_node() {
  clear_has_node();
  ::ZPMeta::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void NodeStatus::set_allocated_node(::ZPMeta::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// required int32 status = 2;
inline bool NodeStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 NodeStatus::status() const {
  return status_;
}
inline void NodeStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// Nodes

// repeated .ZPMeta.NodeStatus nodes = 1;
inline int Nodes::nodes_size() const {
  return nodes_.size();
}
inline void Nodes::clear_nodes() {
  nodes_.Clear();
}
inline const ::ZPMeta::NodeStatus& Nodes::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::ZPMeta::NodeStatus* Nodes::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::ZPMeta::NodeStatus* Nodes::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus >&
Nodes::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus >*
Nodes::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// Replicaset

// required int32 id = 1;
inline bool Replicaset::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Replicaset::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Replicaset::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Replicaset::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Replicaset::id() const {
  return id_;
}
inline void Replicaset::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .ZPMeta.Node node = 2;
inline int Replicaset::node_size() const {
  return node_.size();
}
inline void Replicaset::clear_node() {
  node_.Clear();
}
inline const ::ZPMeta::Node& Replicaset::node(int index) const {
  return node_.Get(index);
}
inline ::ZPMeta::Node* Replicaset::mutable_node(int index) {
  return node_.Mutable(index);
}
inline ::ZPMeta::Node* Replicaset::add_node() {
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >&
Replicaset::node() const {
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >*
Replicaset::mutable_node() {
  return &node_;
}

// -------------------------------------------------------------------

// Partitions

// required int32 id = 1;
inline bool Partitions::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Partitions::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Partitions::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Partitions::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Partitions::id() const {
  return id_;
}
inline void Partitions::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .ZPMeta.Node master = 2;
inline bool Partitions::has_master() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Partitions::set_has_master() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Partitions::clear_has_master() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Partitions::clear_master() {
  if (master_ != NULL) master_->::ZPMeta::Node::Clear();
  clear_has_master();
}
inline const ::ZPMeta::Node& Partitions::master() const {
  return master_ != NULL ? *master_ : *default_instance_->master_;
}
inline ::ZPMeta::Node* Partitions::mutable_master() {
  set_has_master();
  if (master_ == NULL) master_ = new ::ZPMeta::Node;
  return master_;
}
inline ::ZPMeta::Node* Partitions::release_master() {
  clear_has_master();
  ::ZPMeta::Node* temp = master_;
  master_ = NULL;
  return temp;
}
inline void Partitions::set_allocated_master(::ZPMeta::Node* master) {
  delete master_;
  master_ = master;
  if (master) {
    set_has_master();
  } else {
    clear_has_master();
  }
}

// repeated .ZPMeta.Node slaves = 3;
inline int Partitions::slaves_size() const {
  return slaves_.size();
}
inline void Partitions::clear_slaves() {
  slaves_.Clear();
}
inline const ::ZPMeta::Node& Partitions::slaves(int index) const {
  return slaves_.Get(index);
}
inline ::ZPMeta::Node* Partitions::mutable_slaves(int index) {
  return slaves_.Mutable(index);
}
inline ::ZPMeta::Node* Partitions::add_slaves() {
  return slaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >&
Partitions::slaves() const {
  return slaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >*
Partitions::mutable_slaves() {
  return &slaves_;
}

// -------------------------------------------------------------------

// MetaCmd_Join

// required .ZPMeta.Node node = 1;
inline bool MetaCmd_Join::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_Join::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_Join::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_Join::clear_node() {
  if (node_ != NULL) node_->::ZPMeta::Node::Clear();
  clear_has_node();
}
inline const ::ZPMeta::Node& MetaCmd_Join::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ZPMeta::Node* MetaCmd_Join::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ZPMeta::Node;
  return node_;
}
inline ::ZPMeta::Node* MetaCmd_Join::release_node() {
  clear_has_node();
  ::ZPMeta::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void MetaCmd_Join::set_allocated_node(::ZPMeta::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// -------------------------------------------------------------------

// MetaCmd_Ping

// required .ZPMeta.Node node = 1;
inline bool MetaCmd_Ping::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_Ping::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_Ping::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_Ping::clear_node() {
  if (node_ != NULL) node_->::ZPMeta::Node::Clear();
  clear_has_node();
}
inline const ::ZPMeta::Node& MetaCmd_Ping::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ZPMeta::Node* MetaCmd_Ping::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ZPMeta::Node;
  return node_;
}
inline ::ZPMeta::Node* MetaCmd_Ping::release_node() {
  clear_has_node();
  ::ZPMeta::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void MetaCmd_Ping::set_allocated_node(::ZPMeta::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// -------------------------------------------------------------------

// MetaCmd_Update

// repeated .ZPMeta.Partitions info = 1;
inline int MetaCmd_Update::info_size() const {
  return info_.size();
}
inline void MetaCmd_Update::clear_info() {
  info_.Clear();
}
inline const ::ZPMeta::Partitions& MetaCmd_Update::info(int index) const {
  return info_.Get(index);
}
inline ::ZPMeta::Partitions* MetaCmd_Update::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ZPMeta::Partitions* MetaCmd_Update::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions >&
MetaCmd_Update::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions >*
MetaCmd_Update::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// MetaCmd

// required .ZPMeta.MetaCmd.Type type = 1;
inline bool MetaCmd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ZPMeta::MetaCmd_Type MetaCmd::type() const {
  return static_cast< ::ZPMeta::MetaCmd_Type >(type_);
}
inline void MetaCmd::set_type(::ZPMeta::MetaCmd_Type value) {
  assert(::ZPMeta::MetaCmd_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .ZPMeta.MetaCmd.Join join = 2;
inline bool MetaCmd::has_join() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaCmd::set_has_join() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaCmd::clear_has_join() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaCmd::clear_join() {
  if (join_ != NULL) join_->::ZPMeta::MetaCmd_Join::Clear();
  clear_has_join();
}
inline const ::ZPMeta::MetaCmd_Join& MetaCmd::join() const {
  return join_ != NULL ? *join_ : *default_instance_->join_;
}
inline ::ZPMeta::MetaCmd_Join* MetaCmd::mutable_join() {
  set_has_join();
  if (join_ == NULL) join_ = new ::ZPMeta::MetaCmd_Join;
  return join_;
}
inline ::ZPMeta::MetaCmd_Join* MetaCmd::release_join() {
  clear_has_join();
  ::ZPMeta::MetaCmd_Join* temp = join_;
  join_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_join(::ZPMeta::MetaCmd_Join* join) {
  delete join_;
  join_ = join;
  if (join) {
    set_has_join();
  } else {
    clear_has_join();
  }
}

// optional .ZPMeta.MetaCmd.Ping ping = 3;
inline bool MetaCmd::has_ping() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetaCmd::set_has_ping() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetaCmd::clear_has_ping() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetaCmd::clear_ping() {
  if (ping_ != NULL) ping_->::ZPMeta::MetaCmd_Ping::Clear();
  clear_has_ping();
}
inline const ::ZPMeta::MetaCmd_Ping& MetaCmd::ping() const {
  return ping_ != NULL ? *ping_ : *default_instance_->ping_;
}
inline ::ZPMeta::MetaCmd_Ping* MetaCmd::mutable_ping() {
  set_has_ping();
  if (ping_ == NULL) ping_ = new ::ZPMeta::MetaCmd_Ping;
  return ping_;
}
inline ::ZPMeta::MetaCmd_Ping* MetaCmd::release_ping() {
  clear_has_ping();
  ::ZPMeta::MetaCmd_Ping* temp = ping_;
  ping_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_ping(::ZPMeta::MetaCmd_Ping* ping) {
  delete ping_;
  ping_ = ping;
  if (ping) {
    set_has_ping();
  } else {
    clear_has_ping();
  }
}

// optional .ZPMeta.MetaCmd.Update update = 4;
inline bool MetaCmd::has_update() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MetaCmd::set_has_update() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MetaCmd::clear_has_update() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MetaCmd::clear_update() {
  if (update_ != NULL) update_->::ZPMeta::MetaCmd_Update::Clear();
  clear_has_update();
}
inline const ::ZPMeta::MetaCmd_Update& MetaCmd::update() const {
  return update_ != NULL ? *update_ : *default_instance_->update_;
}
inline ::ZPMeta::MetaCmd_Update* MetaCmd::mutable_update() {
  set_has_update();
  if (update_ == NULL) update_ = new ::ZPMeta::MetaCmd_Update;
  return update_;
}
inline ::ZPMeta::MetaCmd_Update* MetaCmd::release_update() {
  clear_has_update();
  ::ZPMeta::MetaCmd_Update* temp = update_;
  update_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_update(::ZPMeta::MetaCmd_Update* update) {
  delete update_;
  update_ = update;
  if (update) {
    set_has_update();
  } else {
    clear_has_update();
  }
}

// -------------------------------------------------------------------

// MetaCmdResponse_Status

// required .ZPMeta.StatusCode code = 1;
inline bool MetaCmdResponse_Status::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmdResponse_Status::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmdResponse_Status::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmdResponse_Status::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::ZPMeta::StatusCode MetaCmdResponse_Status::code() const {
  return static_cast< ::ZPMeta::StatusCode >(code_);
}
inline void MetaCmdResponse_Status::set_code(::ZPMeta::StatusCode value) {
  assert(::ZPMeta::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional bytes msg = 2;
inline bool MetaCmdResponse_Status::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaCmdResponse_Status::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaCmdResponse_Status::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaCmdResponse_Status::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MetaCmdResponse_Status::msg() const {
  return *msg_;
}
inline void MetaCmdResponse_Status::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MetaCmdResponse_Status::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MetaCmdResponse_Status::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaCmdResponse_Status::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* MetaCmdResponse_Status::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MetaCmdResponse_Status::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MetaCmdResponse

// required .ZPMeta.MetaCmdResponse.Type type = 1;
inline bool MetaCmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmdResponse::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ZPMeta::MetaCmdResponse_Type MetaCmdResponse::type() const {
  return static_cast< ::ZPMeta::MetaCmdResponse_Type >(type_);
}
inline void MetaCmdResponse::set_type(::ZPMeta::MetaCmdResponse_Type value) {
  assert(::ZPMeta::MetaCmdResponse_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .ZPMeta.MetaCmdResponse.Status status = 2;
inline bool MetaCmdResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaCmdResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaCmdResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaCmdResponse::clear_status() {
  if (status_ != NULL) status_->::ZPMeta::MetaCmdResponse_Status::Clear();
  clear_has_status();
}
inline const ::ZPMeta::MetaCmdResponse_Status& MetaCmdResponse::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::ZPMeta::MetaCmdResponse_Status* MetaCmdResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::ZPMeta::MetaCmdResponse_Status;
  return status_;
}
inline ::ZPMeta::MetaCmdResponse_Status* MetaCmdResponse::release_status() {
  clear_has_status();
  ::ZPMeta::MetaCmdResponse_Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void MetaCmdResponse::set_allocated_status(::ZPMeta::MetaCmdResponse_Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZPMeta

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZPMeta::MetaCmd_Type>() {
  return ::ZPMeta::MetaCmd_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZPMeta::MetaCmdResponse_Type>() {
  return ::ZPMeta::MetaCmdResponse_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZPMeta::StatusCode>() {
  return ::ZPMeta::StatusCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zp_5fmeta_2eproto__INCLUDED
