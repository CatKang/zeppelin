// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_control.proto

#ifndef PROTOBUF_server_5fcontrol_2eproto__INCLUDED
#define PROTOBUF_server_5fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ServerControl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_5fcontrol_2eproto();
void protobuf_AssignDesc_server_5fcontrol_2eproto();
void protobuf_ShutdownFile_server_5fcontrol_2eproto();

class Node;
class Join;
class Join_Request;
class Join_Response;
class Ping;
class Ping_Request;
class Ping_Response;

enum OPCODE {
  JOIN = 1,
  PING = 2
};
bool OPCODE_IsValid(int value);
const OPCODE OPCODE_MIN = JOIN;
const OPCODE OPCODE_MAX = PING;
const int OPCODE_ARRAYSIZE = OPCODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* OPCODE_descriptor();
inline const ::std::string& OPCODE_Name(OPCODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    OPCODE_descriptor(), value);
}
inline bool OPCODE_Parse(
    const ::std::string& name, OPCODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OPCODE>(
    OPCODE_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerControl.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_server_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_server_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class Join_Request : public ::google::protobuf::Message {
 public:
  Join_Request();
  virtual ~Join_Request();

  Join_Request(const Join_Request& from);

  inline Join_Request& operator=(const Join_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Join_Request& default_instance();

  void Swap(Join_Request* other);

  // implements Message ----------------------------------------------

  Join_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Join_Request& from);
  void MergeFrom(const Join_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ServerControl.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::ServerControl::Node& node() const;
  inline ::ServerControl::Node* mutable_node();
  inline ::ServerControl::Node* release_node();
  inline void set_allocated_node(::ServerControl::Node* node);

  // required int32 filenum = 2;
  inline bool has_filenum() const;
  inline void clear_filenum();
  static const int kFilenumFieldNumber = 2;
  inline ::google::protobuf::int32 filenum() const;
  inline void set_filenum(::google::protobuf::int32 value);

  // required int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerControl.Join.Request)
 private:
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_filenum();
  inline void clear_has_filenum();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ServerControl::Node* node_;
  ::google::protobuf::int32 filenum_;
  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_server_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_server_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static Join_Request* default_instance_;
};
// -------------------------------------------------------------------

class Join_Response : public ::google::protobuf::Message {
 public:
  Join_Response();
  virtual ~Join_Response();

  Join_Response(const Join_Response& from);

  inline Join_Response& operator=(const Join_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Join_Response& default_instance();

  void Swap(Join_Response* other);

  // implements Message ----------------------------------------------

  Join_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Join_Response& from);
  void MergeFrom(const Join_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:ServerControl.Join.Response)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_server_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_server_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static Join_Response* default_instance_;
};
// -------------------------------------------------------------------

class Join : public ::google::protobuf::Message {
 public:
  Join();
  virtual ~Join();

  Join(const Join& from);

  inline Join& operator=(const Join& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Join& default_instance();

  void Swap(Join* other);

  // implements Message ----------------------------------------------

  Join* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Join& from);
  void MergeFrom(const Join& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Join_Request Request;
  typedef Join_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ServerControl.Join)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_server_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_server_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static Join* default_instance_;
};
// -------------------------------------------------------------------

class Ping_Request : public ::google::protobuf::Message {
 public:
  Ping_Request();
  virtual ~Ping_Request();

  Ping_Request(const Ping_Request& from);

  inline Ping_Request& operator=(const Ping_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping_Request& default_instance();

  void Swap(Ping_Request* other);

  // implements Message ----------------------------------------------

  Ping_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping_Request& from);
  void MergeFrom(const Ping_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ServerControl.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::ServerControl::Node& node() const;
  inline ::ServerControl::Node* mutable_node();
  inline ::ServerControl::Node* release_node();
  inline void set_allocated_node(::ServerControl::Node* node);

  // @@protoc_insertion_point(class_scope:ServerControl.Ping.Request)
 private:
  inline void set_has_node();
  inline void clear_has_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ServerControl::Node* node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_server_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_server_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static Ping_Request* default_instance_;
};
// -------------------------------------------------------------------

class Ping_Response : public ::google::protobuf::Message {
 public:
  Ping_Response();
  virtual ~Ping_Response();

  Ping_Response(const Ping_Response& from);

  inline Ping_Response& operator=(const Ping_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping_Response& default_instance();

  void Swap(Ping_Response* other);

  // implements Message ----------------------------------------------

  Ping_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping_Response& from);
  void MergeFrom(const Ping_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerControl.Ping.Response)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_server_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_server_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static Ping_Response* default_instance_;
};
// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Ping_Request Request;
  typedef Ping_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ServerControl.Ping)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_server_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_server_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_server_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static Ping* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required bytes ip = 1;
inline bool Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Node::ip() const {
  return *ip_;
}
inline void Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// Join_Request

// required .ServerControl.Node node = 1;
inline bool Join_Request::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Join_Request::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Join_Request::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Join_Request::clear_node() {
  if (node_ != NULL) node_->::ServerControl::Node::Clear();
  clear_has_node();
}
inline const ::ServerControl::Node& Join_Request::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ServerControl::Node* Join_Request::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ServerControl::Node;
  return node_;
}
inline ::ServerControl::Node* Join_Request::release_node() {
  clear_has_node();
  ::ServerControl::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void Join_Request::set_allocated_node(::ServerControl::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// required int32 filenum = 2;
inline bool Join_Request::has_filenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Join_Request::set_has_filenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Join_Request::clear_has_filenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Join_Request::clear_filenum() {
  filenum_ = 0;
  clear_has_filenum();
}
inline ::google::protobuf::int32 Join_Request::filenum() const {
  return filenum_;
}
inline void Join_Request::set_filenum(::google::protobuf::int32 value) {
  set_has_filenum();
  filenum_ = value;
}

// required int32 offset = 3;
inline bool Join_Request::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Join_Request::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Join_Request::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Join_Request::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 Join_Request::offset() const {
  return offset_;
}
inline void Join_Request::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// Join_Response

// required int32 status = 1;
inline bool Join_Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Join_Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Join_Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Join_Response::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Join_Response::status() const {
  return status_;
}
inline void Join_Response::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional bytes msg = 2;
inline bool Join_Response::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Join_Response::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Join_Response::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Join_Response::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Join_Response::msg() const {
  return *msg_;
}
inline void Join_Response::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Join_Response::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Join_Response::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Join_Response::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Join_Response::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Join_Response::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Join

// -------------------------------------------------------------------

// Ping_Request

// required .ServerControl.Node node = 1;
inline bool Ping_Request::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ping_Request::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ping_Request::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ping_Request::clear_node() {
  if (node_ != NULL) node_->::ServerControl::Node::Clear();
  clear_has_node();
}
inline const ::ServerControl::Node& Ping_Request::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ServerControl::Node* Ping_Request::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ServerControl::Node;
  return node_;
}
inline ::ServerControl::Node* Ping_Request::release_node() {
  clear_has_node();
  ::ServerControl::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void Ping_Request::set_allocated_node(::ServerControl::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// -------------------------------------------------------------------

// Ping_Response

// required int32 status = 1;
inline bool Ping_Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ping_Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ping_Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ping_Response::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Ping_Response::status() const {
  return status_;
}
inline void Ping_Response::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// Ping


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerControl

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerControl::OPCODE>() {
  return ::ServerControl::OPCODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fcontrol_2eproto__INCLUDED
