// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zp_data_control.proto

#ifndef PROTOBUF_zp_5fdata_5fcontrol_2eproto__INCLUDED
#define PROTOBUF_zp_5fdata_5fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ZPDataControl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zp_5fdata_5fcontrol_2eproto();
void protobuf_AssignDesc_zp_5fdata_5fcontrol_2eproto();
void protobuf_ShutdownFile_zp_5fdata_5fcontrol_2eproto();

class Node;
class DataCmdRequest;
class DataCmdRequest_Sync;
class DataCmdResponse;
class DataCmdResponse_Status;

enum DataCmdRequest_TYPE {
  DataCmdRequest_TYPE_SYNC = 1
};
bool DataCmdRequest_TYPE_IsValid(int value);
const DataCmdRequest_TYPE DataCmdRequest_TYPE_TYPE_MIN = DataCmdRequest_TYPE_SYNC;
const DataCmdRequest_TYPE DataCmdRequest_TYPE_TYPE_MAX = DataCmdRequest_TYPE_SYNC;
const int DataCmdRequest_TYPE_TYPE_ARRAYSIZE = DataCmdRequest_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataCmdRequest_TYPE_descriptor();
inline const ::std::string& DataCmdRequest_TYPE_Name(DataCmdRequest_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataCmdRequest_TYPE_descriptor(), value);
}
inline bool DataCmdRequest_TYPE_Parse(
    const ::std::string& name, DataCmdRequest_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataCmdRequest_TYPE>(
    DataCmdRequest_TYPE_descriptor(), name, value);
}
enum DataCmdResponse_TYPE {
  DataCmdResponse_TYPE_SYNC = 1
};
bool DataCmdResponse_TYPE_IsValid(int value);
const DataCmdResponse_TYPE DataCmdResponse_TYPE_TYPE_MIN = DataCmdResponse_TYPE_SYNC;
const DataCmdResponse_TYPE DataCmdResponse_TYPE_TYPE_MAX = DataCmdResponse_TYPE_SYNC;
const int DataCmdResponse_TYPE_TYPE_ARRAYSIZE = DataCmdResponse_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataCmdResponse_TYPE_descriptor();
inline const ::std::string& DataCmdResponse_TYPE_Name(DataCmdResponse_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataCmdResponse_TYPE_descriptor(), value);
}
inline bool DataCmdResponse_TYPE_Parse(
    const ::std::string& name, DataCmdResponse_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataCmdResponse_TYPE>(
    DataCmdResponse_TYPE_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPDataControl.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_zp_5fdata_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class DataCmdRequest_Sync : public ::google::protobuf::Message {
 public:
  DataCmdRequest_Sync();
  virtual ~DataCmdRequest_Sync();

  DataCmdRequest_Sync(const DataCmdRequest_Sync& from);

  inline DataCmdRequest_Sync& operator=(const DataCmdRequest_Sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCmdRequest_Sync& default_instance();

  void Swap(DataCmdRequest_Sync* other);

  // implements Message ----------------------------------------------

  DataCmdRequest_Sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCmdRequest_Sync& from);
  void MergeFrom(const DataCmdRequest_Sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPDataControl.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::ZPDataControl::Node& node() const;
  inline ::ZPDataControl::Node* mutable_node();
  inline ::ZPDataControl::Node* release_node();
  inline void set_allocated_node(::ZPDataControl::Node* node);

  // required int32 filenum = 2 [default = 0];
  inline bool has_filenum() const;
  inline void clear_filenum();
  static const int kFilenumFieldNumber = 2;
  inline ::google::protobuf::int32 filenum() const;
  inline void set_filenum(::google::protobuf::int32 value);

  // required int32 offset = 3 [default = 0];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPDataControl.DataCmdRequest.Sync)
 private:
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_filenum();
  inline void clear_has_filenum();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPDataControl::Node* node_;
  ::google::protobuf::int32 filenum_;
  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_zp_5fdata_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static DataCmdRequest_Sync* default_instance_;
};
// -------------------------------------------------------------------

class DataCmdRequest : public ::google::protobuf::Message {
 public:
  DataCmdRequest();
  virtual ~DataCmdRequest();

  DataCmdRequest(const DataCmdRequest& from);

  inline DataCmdRequest& operator=(const DataCmdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCmdRequest& default_instance();

  void Swap(DataCmdRequest* other);

  // implements Message ----------------------------------------------

  DataCmdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCmdRequest& from);
  void MergeFrom(const DataCmdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataCmdRequest_Sync Sync;

  typedef DataCmdRequest_TYPE TYPE;
  static const TYPE SYNC = DataCmdRequest_TYPE_SYNC;
  static inline bool TYPE_IsValid(int value) {
    return DataCmdRequest_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    DataCmdRequest_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    DataCmdRequest_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    DataCmdRequest_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return DataCmdRequest_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return DataCmdRequest_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return DataCmdRequest_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ZPDataControl.DataCmdRequest.TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ZPDataControl::DataCmdRequest_TYPE type() const;
  inline void set_type(::ZPDataControl::DataCmdRequest_TYPE value);

  // optional .ZPDataControl.DataCmdRequest.Sync sync = 2;
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 2;
  inline const ::ZPDataControl::DataCmdRequest_Sync& sync() const;
  inline ::ZPDataControl::DataCmdRequest_Sync* mutable_sync();
  inline ::ZPDataControl::DataCmdRequest_Sync* release_sync();
  inline void set_allocated_sync(::ZPDataControl::DataCmdRequest_Sync* sync);

  // @@protoc_insertion_point(class_scope:ZPDataControl.DataCmdRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sync();
  inline void clear_has_sync();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPDataControl::DataCmdRequest_Sync* sync_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_zp_5fdata_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static DataCmdRequest* default_instance_;
};
// -------------------------------------------------------------------

class DataCmdResponse_Status : public ::google::protobuf::Message {
 public:
  DataCmdResponse_Status();
  virtual ~DataCmdResponse_Status();

  DataCmdResponse_Status(const DataCmdResponse_Status& from);

  inline DataCmdResponse_Status& operator=(const DataCmdResponse_Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCmdResponse_Status& default_instance();

  void Swap(DataCmdResponse_Status* other);

  // implements Message ----------------------------------------------

  DataCmdResponse_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCmdResponse_Status& from);
  void MergeFrom(const DataCmdResponse_Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:ZPDataControl.DataCmdResponse.Status)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_zp_5fdata_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static DataCmdResponse_Status* default_instance_;
};
// -------------------------------------------------------------------

class DataCmdResponse : public ::google::protobuf::Message {
 public:
  DataCmdResponse();
  virtual ~DataCmdResponse();

  DataCmdResponse(const DataCmdResponse& from);

  inline DataCmdResponse& operator=(const DataCmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCmdResponse& default_instance();

  void Swap(DataCmdResponse* other);

  // implements Message ----------------------------------------------

  DataCmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCmdResponse& from);
  void MergeFrom(const DataCmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataCmdResponse_Status Status;

  typedef DataCmdResponse_TYPE TYPE;
  static const TYPE SYNC = DataCmdResponse_TYPE_SYNC;
  static inline bool TYPE_IsValid(int value) {
    return DataCmdResponse_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    DataCmdResponse_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    DataCmdResponse_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    DataCmdResponse_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return DataCmdResponse_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return DataCmdResponse_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return DataCmdResponse_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ZPDataControl.DataCmdResponse.TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ZPDataControl::DataCmdResponse_TYPE type() const;
  inline void set_type(::ZPDataControl::DataCmdResponse_TYPE value);

  // required .ZPDataControl.DataCmdResponse.Status status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::ZPDataControl::DataCmdResponse_Status& status() const;
  inline ::ZPDataControl::DataCmdResponse_Status* mutable_status();
  inline ::ZPDataControl::DataCmdResponse_Status* release_status();
  inline void set_allocated_status(::ZPDataControl::DataCmdResponse_Status* status);

  // @@protoc_insertion_point(class_scope:ZPDataControl.DataCmdResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPDataControl::DataCmdResponse_Status* status_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_zp_5fdata_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_zp_5fdata_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static DataCmdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required bytes ip = 1;
inline bool Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Node::ip() const {
  return *ip_;
}
inline void Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// DataCmdRequest_Sync

// required .ZPDataControl.Node node = 1;
inline bool DataCmdRequest_Sync::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCmdRequest_Sync::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCmdRequest_Sync::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCmdRequest_Sync::clear_node() {
  if (node_ != NULL) node_->::ZPDataControl::Node::Clear();
  clear_has_node();
}
inline const ::ZPDataControl::Node& DataCmdRequest_Sync::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ZPDataControl::Node* DataCmdRequest_Sync::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ZPDataControl::Node;
  return node_;
}
inline ::ZPDataControl::Node* DataCmdRequest_Sync::release_node() {
  clear_has_node();
  ::ZPDataControl::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void DataCmdRequest_Sync::set_allocated_node(::ZPDataControl::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// required int32 filenum = 2 [default = 0];
inline bool DataCmdRequest_Sync::has_filenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCmdRequest_Sync::set_has_filenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCmdRequest_Sync::clear_has_filenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCmdRequest_Sync::clear_filenum() {
  filenum_ = 0;
  clear_has_filenum();
}
inline ::google::protobuf::int32 DataCmdRequest_Sync::filenum() const {
  return filenum_;
}
inline void DataCmdRequest_Sync::set_filenum(::google::protobuf::int32 value) {
  set_has_filenum();
  filenum_ = value;
}

// required int32 offset = 3 [default = 0];
inline bool DataCmdRequest_Sync::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataCmdRequest_Sync::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataCmdRequest_Sync::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataCmdRequest_Sync::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 DataCmdRequest_Sync::offset() const {
  return offset_;
}
inline void DataCmdRequest_Sync::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// DataCmdRequest

// required .ZPDataControl.DataCmdRequest.TYPE type = 1;
inline bool DataCmdRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCmdRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCmdRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCmdRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ZPDataControl::DataCmdRequest_TYPE DataCmdRequest::type() const {
  return static_cast< ::ZPDataControl::DataCmdRequest_TYPE >(type_);
}
inline void DataCmdRequest::set_type(::ZPDataControl::DataCmdRequest_TYPE value) {
  assert(::ZPDataControl::DataCmdRequest_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .ZPDataControl.DataCmdRequest.Sync sync = 2;
inline bool DataCmdRequest::has_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCmdRequest::set_has_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCmdRequest::clear_has_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCmdRequest::clear_sync() {
  if (sync_ != NULL) sync_->::ZPDataControl::DataCmdRequest_Sync::Clear();
  clear_has_sync();
}
inline const ::ZPDataControl::DataCmdRequest_Sync& DataCmdRequest::sync() const {
  return sync_ != NULL ? *sync_ : *default_instance_->sync_;
}
inline ::ZPDataControl::DataCmdRequest_Sync* DataCmdRequest::mutable_sync() {
  set_has_sync();
  if (sync_ == NULL) sync_ = new ::ZPDataControl::DataCmdRequest_Sync;
  return sync_;
}
inline ::ZPDataControl::DataCmdRequest_Sync* DataCmdRequest::release_sync() {
  clear_has_sync();
  ::ZPDataControl::DataCmdRequest_Sync* temp = sync_;
  sync_ = NULL;
  return temp;
}
inline void DataCmdRequest::set_allocated_sync(::ZPDataControl::DataCmdRequest_Sync* sync) {
  delete sync_;
  sync_ = sync;
  if (sync) {
    set_has_sync();
  } else {
    clear_has_sync();
  }
}

// -------------------------------------------------------------------

// DataCmdResponse_Status

// required int32 status = 1;
inline bool DataCmdResponse_Status::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCmdResponse_Status::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCmdResponse_Status::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCmdResponse_Status::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 DataCmdResponse_Status::status() const {
  return status_;
}
inline void DataCmdResponse_Status::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional bytes msg = 2;
inline bool DataCmdResponse_Status::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCmdResponse_Status::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCmdResponse_Status::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCmdResponse_Status::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& DataCmdResponse_Status::msg() const {
  return *msg_;
}
inline void DataCmdResponse_Status::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void DataCmdResponse_Status::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void DataCmdResponse_Status::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataCmdResponse_Status::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* DataCmdResponse_Status::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataCmdResponse_Status::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataCmdResponse

// required .ZPDataControl.DataCmdResponse.TYPE type = 1;
inline bool DataCmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCmdResponse::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ZPDataControl::DataCmdResponse_TYPE DataCmdResponse::type() const {
  return static_cast< ::ZPDataControl::DataCmdResponse_TYPE >(type_);
}
inline void DataCmdResponse::set_type(::ZPDataControl::DataCmdResponse_TYPE value) {
  assert(::ZPDataControl::DataCmdResponse_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .ZPDataControl.DataCmdResponse.Status status = 2;
inline bool DataCmdResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCmdResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCmdResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCmdResponse::clear_status() {
  if (status_ != NULL) status_->::ZPDataControl::DataCmdResponse_Status::Clear();
  clear_has_status();
}
inline const ::ZPDataControl::DataCmdResponse_Status& DataCmdResponse::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::ZPDataControl::DataCmdResponse_Status* DataCmdResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::ZPDataControl::DataCmdResponse_Status;
  return status_;
}
inline ::ZPDataControl::DataCmdResponse_Status* DataCmdResponse::release_status() {
  clear_has_status();
  ::ZPDataControl::DataCmdResponse_Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void DataCmdResponse::set_allocated_status(::ZPDataControl::DataCmdResponse_Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZPDataControl

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZPDataControl::DataCmdRequest_TYPE>() {
  return ::ZPDataControl::DataCmdRequest_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZPDataControl::DataCmdResponse_TYPE>() {
  return ::ZPDataControl::DataCmdResponse_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zp_5fdata_5fcontrol_2eproto__INCLUDED
