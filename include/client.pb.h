// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eproto();
void protobuf_AssignDesc_client_2eproto();
void protobuf_ShutdownFile_client_2eproto();

class Node;
class CmdRequest;
class CmdRequest_Sync;
class CmdRequest_Set;
class CmdRequest_Get;
class CmdRequest_Del;
class CmdResponse;
class CmdResponse_Get;
class SyncRequest;

enum Type {
  SYNC = 0,
  SET = 1,
  GET = 2,
  DEL = 3
};
bool Type_IsValid(int value);
const Type Type_MIN = SYNC;
const Type Type_MAX = DEL;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum StatusCode {
  kOk = 0,
  kNotFound = 1,
  kWait = 2,
  kError = 3
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kError;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Sync : public ::google::protobuf::Message {
 public:
  CmdRequest_Sync();
  virtual ~CmdRequest_Sync();

  CmdRequest_Sync(const CmdRequest_Sync& from);

  inline CmdRequest_Sync& operator=(const CmdRequest_Sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Sync& default_instance();

  void Swap(CmdRequest_Sync* other);

  // implements Message ----------------------------------------------

  CmdRequest_Sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Sync& from);
  void MergeFrom(const CmdRequest_Sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::client::Node& node() const;
  inline ::client::Node* mutable_node();
  inline ::client::Node* release_node();
  inline void set_allocated_node(::client::Node* node);

  // required string table_name = 2;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required int32 partition_id = 3;
  inline bool has_partition_id() const;
  inline void clear_partition_id();
  static const int kPartitionIdFieldNumber = 3;
  inline ::google::protobuf::int32 partition_id() const;
  inline void set_partition_id(::google::protobuf::int32 value);

  // required int32 filenum = 4 [default = 0];
  inline bool has_filenum() const;
  inline void clear_filenum();
  static const int kFilenumFieldNumber = 4;
  inline ::google::protobuf::int32 filenum() const;
  inline void set_filenum(::google::protobuf::int32 value);

  // required int64 offset = 5 [default = 0];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 5;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Sync)
 private:
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_partition_id();
  inline void clear_has_partition_id();
  inline void set_has_filenum();
  inline void clear_has_filenum();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::Node* node_;
  ::std::string* table_name_;
  ::google::protobuf::int32 partition_id_;
  ::google::protobuf::int32 filenum_;
  ::google::protobuf::int64 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Sync* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Set : public ::google::protobuf::Message {
 public:
  CmdRequest_Set();
  virtual ~CmdRequest_Set();

  CmdRequest_Set(const CmdRequest_Set& from);

  inline CmdRequest_Set& operator=(const CmdRequest_Set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Set& default_instance();

  void Swap(CmdRequest_Set* other);

  // implements Message ----------------------------------------------

  CmdRequest_Set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Set& from);
  void MergeFrom(const CmdRequest_Set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Set)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* key_;
  ::std::string* value_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Set* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Get : public ::google::protobuf::Message {
 public:
  CmdRequest_Get();
  virtual ~CmdRequest_Get();

  CmdRequest_Get(const CmdRequest_Get& from);

  inline CmdRequest_Get& operator=(const CmdRequest_Get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Get& default_instance();

  void Swap(CmdRequest_Get* other);

  // implements Message ----------------------------------------------

  CmdRequest_Get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Get& from);
  void MergeFrom(const CmdRequest_Get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Get)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* key_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Get* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Del : public ::google::protobuf::Message {
 public:
  CmdRequest_Del();
  virtual ~CmdRequest_Del();

  CmdRequest_Del(const CmdRequest_Del& from);

  inline CmdRequest_Del& operator=(const CmdRequest_Del& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Del& default_instance();

  void Swap(CmdRequest_Del* other);

  // implements Message ----------------------------------------------

  CmdRequest_Del* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Del& from);
  void MergeFrom(const CmdRequest_Del& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Del)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* key_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Del* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest : public ::google::protobuf::Message {
 public:
  CmdRequest();
  virtual ~CmdRequest();

  CmdRequest(const CmdRequest& from);

  inline CmdRequest& operator=(const CmdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest& default_instance();

  void Swap(CmdRequest* other);

  // implements Message ----------------------------------------------

  CmdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest& from);
  void MergeFrom(const CmdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdRequest_Sync Sync;
  typedef CmdRequest_Set Set;
  typedef CmdRequest_Get Get;
  typedef CmdRequest_Del Del;

  // accessors -------------------------------------------------------

  // required .client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::Type type() const;
  inline void set_type(::client::Type value);

  // optional .client.CmdRequest.Sync sync = 2;
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 2;
  inline const ::client::CmdRequest_Sync& sync() const;
  inline ::client::CmdRequest_Sync* mutable_sync();
  inline ::client::CmdRequest_Sync* release_sync();
  inline void set_allocated_sync(::client::CmdRequest_Sync* sync);

  // optional .client.CmdRequest.Set set = 3;
  inline bool has_set() const;
  inline void clear_set();
  static const int kSetFieldNumber = 3;
  inline const ::client::CmdRequest_Set& set() const;
  inline ::client::CmdRequest_Set* mutable_set();
  inline ::client::CmdRequest_Set* release_set();
  inline void set_allocated_set(::client::CmdRequest_Set* set);

  // optional .client.CmdRequest.Get get = 4;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 4;
  inline const ::client::CmdRequest_Get& get() const;
  inline ::client::CmdRequest_Get* mutable_get();
  inline ::client::CmdRequest_Get* release_get();
  inline void set_allocated_get(::client::CmdRequest_Get* get);

  // optional .client.CmdRequest.Del del = 5;
  inline bool has_del() const;
  inline void clear_del();
  static const int kDelFieldNumber = 5;
  inline const ::client::CmdRequest_Del& del() const;
  inline ::client::CmdRequest_Del* mutable_del();
  inline ::client::CmdRequest_Del* release_del();
  inline void set_allocated_del(::client::CmdRequest_Del* del);

  // @@protoc_insertion_point(class_scope:client.CmdRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sync();
  inline void clear_has_sync();
  inline void set_has_set();
  inline void clear_has_set();
  inline void set_has_get();
  inline void clear_has_get();
  inline void set_has_del();
  inline void clear_has_del();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::CmdRequest_Sync* sync_;
  ::client::CmdRequest_Set* set_;
  ::client::CmdRequest_Get* get_;
  ::client::CmdRequest_Del* del_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Get : public ::google::protobuf::Message {
 public:
  CmdResponse_Get();
  virtual ~CmdResponse_Get();

  CmdResponse_Get(const CmdResponse_Get& from);

  inline CmdResponse_Get& operator=(const CmdResponse_Get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Get& default_instance();

  void Swap(CmdResponse_Get* other);

  // implements Message ----------------------------------------------

  CmdResponse_Get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Get& from);
  void MergeFrom(const CmdResponse_Get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:client.CmdResponse.Get)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_Get* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  void Swap(CmdResponse* other);

  // implements Message ----------------------------------------------

  CmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdResponse_Get Get;

  // accessors -------------------------------------------------------

  // required .client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::Type type() const;
  inline void set_type(::client::Type value);

  // required .client.StatusCode code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::client::StatusCode code() const;
  inline void set_code(::client::StatusCode value);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .client.CmdResponse.Get get = 4;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 4;
  inline const ::client::CmdResponse_Get& get() const;
  inline ::client::CmdResponse_Get* mutable_get();
  inline ::client::CmdResponse_Get* release_get();
  inline void set_allocated_get(::client::CmdResponse_Get* get);

  // optional .client.Node redirect = 5;
  inline bool has_redirect() const;
  inline void clear_redirect();
  static const int kRedirectFieldNumber = 5;
  inline const ::client::Node& redirect() const;
  inline ::client::Node* mutable_redirect();
  inline ::client::Node* release_redirect();
  inline void set_allocated_redirect(::client::Node* redirect);

  // @@protoc_insertion_point(class_scope:client.CmdResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_get();
  inline void clear_has_get();
  inline void set_has_redirect();
  inline void clear_has_redirect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int code_;
  ::std::string* msg_;
  ::client::CmdResponse_Get* get_;
  ::client::Node* redirect_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse* default_instance_;
};
// -------------------------------------------------------------------

class SyncRequest : public ::google::protobuf::Message {
 public:
  SyncRequest();
  virtual ~SyncRequest();

  SyncRequest(const SyncRequest& from);

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRequest& default_instance();

  void Swap(SyncRequest* other);

  // implements Message ----------------------------------------------

  SyncRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncRequest& from);
  void MergeFrom(const SyncRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 epoch = 1;
  inline bool has_epoch() const;
  inline void clear_epoch();
  static const int kEpochFieldNumber = 1;
  inline ::google::protobuf::int64 epoch() const;
  inline void set_epoch(::google::protobuf::int64 value);

  // required .client.Node from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::client::Node& from() const;
  inline ::client::Node* mutable_from();
  inline ::client::Node* release_from();
  inline void set_allocated_from(::client::Node* from);

  // required .client.CmdRequest request = 3;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 3;
  inline const ::client::CmdRequest& request() const;
  inline ::client::CmdRequest* mutable_request();
  inline ::client::CmdRequest* release_request();
  inline void set_allocated_request(::client::CmdRequest* request);

  // @@protoc_insertion_point(class_scope:client.SyncRequest)
 private:
  inline void set_has_epoch();
  inline void clear_has_epoch();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_request();
  inline void clear_has_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 epoch_;
  ::client::Node* from_;
  ::client::CmdRequest* request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static SyncRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required string ip = 1;
inline bool Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Node::ip() const {
  return *ip_;
}
inline void Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_Sync

// required .client.Node node = 1;
inline bool CmdRequest_Sync::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Sync::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Sync::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Sync::clear_node() {
  if (node_ != NULL) node_->::client::Node::Clear();
  clear_has_node();
}
inline const ::client::Node& CmdRequest_Sync::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::client::Node* CmdRequest_Sync::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::client::Node;
  return node_;
}
inline ::client::Node* CmdRequest_Sync::release_node() {
  clear_has_node();
  ::client::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void CmdRequest_Sync::set_allocated_node(::client::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// required string table_name = 2;
inline bool CmdRequest_Sync::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Sync::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Sync::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Sync::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Sync::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Sync::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Sync::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Sync::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Sync::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Sync::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Sync::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 partition_id = 3;
inline bool CmdRequest_Sync::has_partition_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_Sync::set_has_partition_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_Sync::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_Sync::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
inline ::google::protobuf::int32 CmdRequest_Sync::partition_id() const {
  return partition_id_;
}
inline void CmdRequest_Sync::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
}

// required int32 filenum = 4 [default = 0];
inline bool CmdRequest_Sync::has_filenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_Sync::set_has_filenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_Sync::clear_has_filenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_Sync::clear_filenum() {
  filenum_ = 0;
  clear_has_filenum();
}
inline ::google::protobuf::int32 CmdRequest_Sync::filenum() const {
  return filenum_;
}
inline void CmdRequest_Sync::set_filenum(::google::protobuf::int32 value) {
  set_has_filenum();
  filenum_ = value;
}

// required int64 offset = 5 [default = 0];
inline bool CmdRequest_Sync::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest_Sync::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest_Sync::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest_Sync::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 CmdRequest_Sync::offset() const {
  return offset_;
}
inline void CmdRequest_Sync::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_Set

// required string table_name = 1;
inline bool CmdRequest_Set::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Set::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Set::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Set::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Set::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Set::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Set::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Set::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Set::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Set::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool CmdRequest_Set::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Set::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Set::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Set::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdRequest_Set::key() const {
  return *key_;
}
inline void CmdRequest_Set::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Set::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Set::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdRequest_Set::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Set::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 3;
inline bool CmdRequest_Set::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_Set::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_Set::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_Set::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdRequest_Set::value() const {
  return *value_;
}
inline void CmdRequest_Set::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_Set::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_Set::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdRequest_Set::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Set::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 4;
inline bool CmdRequest_Set::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_Set::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_Set::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_Set::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& CmdRequest_Set::uuid() const {
  return *uuid_;
}
inline void CmdRequest_Set::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Set::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Set::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* CmdRequest_Set::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Set::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_Get

// required string table_name = 1;
inline bool CmdRequest_Get::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Get::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Get::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Get::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Get::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Get::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Get::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Get::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Get::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Get::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Get::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool CmdRequest_Get::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Get::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Get::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Get::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdRequest_Get::key() const {
  return *key_;
}
inline void CmdRequest_Get::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Get::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Get::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Get::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdRequest_Get::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Get::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 3;
inline bool CmdRequest_Get::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_Get::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_Get::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_Get::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& CmdRequest_Get::uuid() const {
  return *uuid_;
}
inline void CmdRequest_Get::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Get::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Get::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Get::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* CmdRequest_Get::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Get::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_Del

// required string table_name = 1;
inline bool CmdRequest_Del::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Del::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Del::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Del::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Del::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Del::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Del::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Del::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Del::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Del::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Del::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool CmdRequest_Del::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Del::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Del::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Del::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdRequest_Del::key() const {
  return *key_;
}
inline void CmdRequest_Del::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Del::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Del::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Del::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdRequest_Del::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Del::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 3;
inline bool CmdRequest_Del::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_Del::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_Del::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_Del::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& CmdRequest_Del::uuid() const {
  return *uuid_;
}
inline void CmdRequest_Del::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Del::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Del::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Del::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* CmdRequest_Del::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Del::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest

// required .client.Type type = 1;
inline bool CmdRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::client::Type CmdRequest::type() const {
  return static_cast< ::client::Type >(type_);
}
inline void CmdRequest::set_type(::client::Type value) {
  assert(::client::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .client.CmdRequest.Sync sync = 2;
inline bool CmdRequest::has_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest::set_has_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest::clear_has_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest::clear_sync() {
  if (sync_ != NULL) sync_->::client::CmdRequest_Sync::Clear();
  clear_has_sync();
}
inline const ::client::CmdRequest_Sync& CmdRequest::sync() const {
  return sync_ != NULL ? *sync_ : *default_instance_->sync_;
}
inline ::client::CmdRequest_Sync* CmdRequest::mutable_sync() {
  set_has_sync();
  if (sync_ == NULL) sync_ = new ::client::CmdRequest_Sync;
  return sync_;
}
inline ::client::CmdRequest_Sync* CmdRequest::release_sync() {
  clear_has_sync();
  ::client::CmdRequest_Sync* temp = sync_;
  sync_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_sync(::client::CmdRequest_Sync* sync) {
  delete sync_;
  sync_ = sync;
  if (sync) {
    set_has_sync();
  } else {
    clear_has_sync();
  }
}

// optional .client.CmdRequest.Set set = 3;
inline bool CmdRequest::has_set() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest::set_has_set() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest::clear_has_set() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest::clear_set() {
  if (set_ != NULL) set_->::client::CmdRequest_Set::Clear();
  clear_has_set();
}
inline const ::client::CmdRequest_Set& CmdRequest::set() const {
  return set_ != NULL ? *set_ : *default_instance_->set_;
}
inline ::client::CmdRequest_Set* CmdRequest::mutable_set() {
  set_has_set();
  if (set_ == NULL) set_ = new ::client::CmdRequest_Set;
  return set_;
}
inline ::client::CmdRequest_Set* CmdRequest::release_set() {
  clear_has_set();
  ::client::CmdRequest_Set* temp = set_;
  set_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_set(::client::CmdRequest_Set* set) {
  delete set_;
  set_ = set;
  if (set) {
    set_has_set();
  } else {
    clear_has_set();
  }
}

// optional .client.CmdRequest.Get get = 4;
inline bool CmdRequest::has_get() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest::set_has_get() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest::clear_has_get() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest::clear_get() {
  if (get_ != NULL) get_->::client::CmdRequest_Get::Clear();
  clear_has_get();
}
inline const ::client::CmdRequest_Get& CmdRequest::get() const {
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::client::CmdRequest_Get* CmdRequest::mutable_get() {
  set_has_get();
  if (get_ == NULL) get_ = new ::client::CmdRequest_Get;
  return get_;
}
inline ::client::CmdRequest_Get* CmdRequest::release_get() {
  clear_has_get();
  ::client::CmdRequest_Get* temp = get_;
  get_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_get(::client::CmdRequest_Get* get) {
  delete get_;
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
}

// optional .client.CmdRequest.Del del = 5;
inline bool CmdRequest::has_del() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest::set_has_del() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest::clear_has_del() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest::clear_del() {
  if (del_ != NULL) del_->::client::CmdRequest_Del::Clear();
  clear_has_del();
}
inline const ::client::CmdRequest_Del& CmdRequest::del() const {
  return del_ != NULL ? *del_ : *default_instance_->del_;
}
inline ::client::CmdRequest_Del* CmdRequest::mutable_del() {
  set_has_del();
  if (del_ == NULL) del_ = new ::client::CmdRequest_Del;
  return del_;
}
inline ::client::CmdRequest_Del* CmdRequest::release_del() {
  clear_has_del();
  ::client::CmdRequest_Del* temp = del_;
  del_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_del(::client::CmdRequest_Del* del) {
  delete del_;
  del_ = del;
  if (del) {
    set_has_del();
  } else {
    clear_has_del();
  }
}

// -------------------------------------------------------------------

// CmdResponse_Get

// optional string value = 1;
inline bool CmdResponse_Get::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_Get::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_Get::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_Get::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdResponse_Get::value() const {
  return *value_;
}
inline void CmdResponse_Get::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Get::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Get::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Get::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdResponse_Get::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_Get::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdResponse

// required .client.Type type = 1;
inline bool CmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::client::Type CmdResponse::type() const {
  return static_cast< ::client::Type >(type_);
}
inline void CmdResponse::set_type(::client::Type value) {
  assert(::client::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .client.StatusCode code = 2;
inline bool CmdResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::client::StatusCode CmdResponse::code() const {
  return static_cast< ::client::StatusCode >(code_);
}
inline void CmdResponse::set_code(::client::StatusCode value) {
  assert(::client::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string msg = 3;
inline bool CmdResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CmdResponse::msg() const {
  return *msg_;
}
inline void CmdResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CmdResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.CmdResponse.Get get = 4;
inline bool CmdResponse::has_get() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse::set_has_get() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse::clear_has_get() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse::clear_get() {
  if (get_ != NULL) get_->::client::CmdResponse_Get::Clear();
  clear_has_get();
}
inline const ::client::CmdResponse_Get& CmdResponse::get() const {
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::client::CmdResponse_Get* CmdResponse::mutable_get() {
  set_has_get();
  if (get_ == NULL) get_ = new ::client::CmdResponse_Get;
  return get_;
}
inline ::client::CmdResponse_Get* CmdResponse::release_get() {
  clear_has_get();
  ::client::CmdResponse_Get* temp = get_;
  get_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_get(::client::CmdResponse_Get* get) {
  delete get_;
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
}

// optional .client.Node redirect = 5;
inline bool CmdResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse::clear_redirect() {
  if (redirect_ != NULL) redirect_->::client::Node::Clear();
  clear_has_redirect();
}
inline const ::client::Node& CmdResponse::redirect() const {
  return redirect_ != NULL ? *redirect_ : *default_instance_->redirect_;
}
inline ::client::Node* CmdResponse::mutable_redirect() {
  set_has_redirect();
  if (redirect_ == NULL) redirect_ = new ::client::Node;
  return redirect_;
}
inline ::client::Node* CmdResponse::release_redirect() {
  clear_has_redirect();
  ::client::Node* temp = redirect_;
  redirect_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_redirect(::client::Node* redirect) {
  delete redirect_;
  redirect_ = redirect;
  if (redirect) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
}

// -------------------------------------------------------------------

// SyncRequest

// required int64 epoch = 1;
inline bool SyncRequest::has_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncRequest::set_has_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncRequest::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncRequest::clear_epoch() {
  epoch_ = GOOGLE_LONGLONG(0);
  clear_has_epoch();
}
inline ::google::protobuf::int64 SyncRequest::epoch() const {
  return epoch_;
}
inline void SyncRequest::set_epoch(::google::protobuf::int64 value) {
  set_has_epoch();
  epoch_ = value;
}

// required .client.Node from = 2;
inline bool SyncRequest::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncRequest::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncRequest::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncRequest::clear_from() {
  if (from_ != NULL) from_->::client::Node::Clear();
  clear_has_from();
}
inline const ::client::Node& SyncRequest::from() const {
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
inline ::client::Node* SyncRequest::mutable_from() {
  set_has_from();
  if (from_ == NULL) from_ = new ::client::Node;
  return from_;
}
inline ::client::Node* SyncRequest::release_from() {
  clear_has_from();
  ::client::Node* temp = from_;
  from_ = NULL;
  return temp;
}
inline void SyncRequest::set_allocated_from(::client::Node* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
}

// required .client.CmdRequest request = 3;
inline bool SyncRequest::has_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncRequest::set_has_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncRequest::clear_has_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncRequest::clear_request() {
  if (request_ != NULL) request_->::client::CmdRequest::Clear();
  clear_has_request();
}
inline const ::client::CmdRequest& SyncRequest::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::client::CmdRequest* SyncRequest::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::client::CmdRequest;
  return request_;
}
inline ::client::CmdRequest* SyncRequest::release_request() {
  clear_has_request();
  ::client::CmdRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void SyncRequest::set_allocated_request(::client::CmdRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::Type>() {
  return ::client::Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::StatusCode>() {
  return ::client::StatusCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED
